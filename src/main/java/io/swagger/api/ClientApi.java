/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Client;
import io.swagger.model.ClientAction;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.util.ArrayList;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-05-24T21:01:11.236Z")

@Api(value = "client", description = "the client API")
public interface ClientApi {

    @ApiOperation(value = "", nickname = "getClientById", notes = "Get client information by its id", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Client was fetched correctly"),
        @ApiResponse(code = 404, message = "Client was not found") })
    @RequestMapping(value = "/client/{uuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    Client getClientById(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid);
    
    
    @ApiOperation(value = "", nickname = "UpdateClient", notes = "update client preference", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully update the client Info") })
    @RequestMapping(value = "/client/{uuid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    void updateClient(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid, @ApiParam(value = "Text of the client to be saved"  )  @Valid @RequestBody  ClientAction action);
    
    
    @ApiOperation(value = "", nickname = "deleteActionById", notes = "delete action by its id of a single client", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Action was deleted correctly"),
        @ApiResponse(code = 404, message = "Action was not found") })
    @RequestMapping(value = "/client/{uuid}/recent/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    void deleteActionById(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "unique identifier of the action",required=true) @PathVariable("id") String id);
    
    @ApiOperation(value = "", nickname = "getActionById", notes = "Get action by its id of a single client", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Action was fetched correctly"),
        @ApiResponse(code = 404, message = "Action was not found") })
    @RequestMapping(value = "/client/{uuid}/recent/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ClientAction getActionById(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "unique identifier of the action",required=true) @PathVariable("id") String id);
    
    
    
    @ApiOperation(value = "", nickname = "getAllActions", notes = "Get all recent actions of a single client", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Actions were fetched correctly"),
        @ApiResponse(code = 404, message = "Actions were not found") })
    @RequestMapping(value = "/client/{uuid}/recents",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ArrayList<ClientAction> getAllActions(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid);

    
    @ApiOperation(value = "", nickname = "deleteAllActions", notes = "Delete all recent actions of a single client", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Actions were deleted correctly"),
        @ApiResponse(code = 404, message = "Actions were not found") })
    @RequestMapping(value = "/client/{uuid}/recents",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    void deleteAllActions(@ApiParam(value = "unique identifier of the client",required=true) @PathVariable("uuid") String uuid);
}
